import {visionEmbeddingGenerator, textEmbeddingGenerator} from './model.js'
import pgvector from 'pgvector/pg';
import {getFilePaths} from './utils.js'
import pkg from 'pg';


const { Client } = pkg

export async function createTableIfNotExists(client) {
    await client.connect();
  
    try {
      // Ensure the pgvector extension is installed
      await client.query('CREATE EXTENSION IF NOT EXISTS vector;');
  
      // Check if the table exists
      const checkTableExistsQuery = `
        SELECT EXISTS (
          SELECT 1
          FROM information_schema.tables 
          WHERE table_schema = 'public'
          AND table_name = 'Search_table'
        );
      `;
      
      const result = await client.query(checkTableExistsQuery);
      const tableExists = result.rows[0].exists;
  
      if (!tableExists) {
        const documentTable = `
          CREATE TABLE Search_table (
            id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            path TEXT,
            embedding vector(512)
          );
        `;
        await client.query(documentTable);
        console.log('Table created successfully');
      } else {
        console.log('Table already exists');
      }
    } catch (err) {
      console.error('Error creating table:', err);
    } finally {
      await client.end();
    }
  }

export async function insertInTable(client, filePaths) {
    // Load processor and vision model
    await client.connect();
    await pgvector.registerTypes(client);
    try {
      for (const filePath of filePaths) {
          try { 
              // Compute embeddings
              const vision_embedding = await visionEmbeddingGenerator(filePath);

              console.log(`Embeddings for ${filePath}:`, [pgvector.toSql(Array.from(vision_embedding))]);
               
              await client.query('INSERT INTO Search_table (path, embedding) VALUES ($1, $2)', [
                  filePath,
                  pgvector.toSql(Array.from(vision_embedding)),
              ]);
          } 
          catch (err) {
              console.error(`Error processing ${filePath}:`, err);
          }
      }
  } 
  finally {
      await client.end();
  }
  }

function main(){
//   const client = new Client({
//     user: 'tsdbadmin',
//     host: 'ehx4sn6tr1.rhgdqu5xv1.tsdb.cloud.timescale.com',
//     database: 'tsdb',
//     password: 'xs14n4qhmrbewxp4',
//     port: 31062,
//     ssl: {
//       rejectUnauthorized: false,
//     },
// });
  //insertInTable(client, getFilePaths('dataset'))
  console.log(getFilePaths('dataset'))
}

main()